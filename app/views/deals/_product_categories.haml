= f.fields_for :lenders, lender do |lf|
  - lender.product_categories.each_with_index do |category, i|
    .category
      %h3
        = category.display_name

      = lf.collection_check_boxes :product_ids, category.available_products, :id, :name do |cb|
        .row.product
          .columns.clearfix
            .left
              = cb.label do
                = cb.object.name
            .right
              = cb.check_box

      - category.available_insurance_policies_grouped_by_name.each do |name, policies|
        - insurance_rates = policies.map { |p| p.insurance_rates.map(&:term) }.inject(:&).select { |term| term <= lender.term }

        - insurance_terms = lender.insurance_terms
        - insurance_term = insurance_terms.detect { |t| policies.include? t.insurance_policy } || InsuranceTerm.new(insurance_policy: policies.first)

        = lf.fields_for :insurance_terms, insurance_term do |tf|
          .row.product
            .columns.clearfix
              .left
                = tf.label :insurance_policy_id, name
              .right
                = tf.check_box :insurance_policy_id, { checked: insurance_terms.include?(insurance_term), label: false, name: nil, class: 'insurance-term-checkbox' }
                = tf.hidden_field :_destroy, value: insurance_terms.exclude?(insurance_term)
              .right
                = tf.select :term, options_for_select(insurance_rates, insurance_term.term || lender.term), { label: false }, class: 'term'

              - if lender.lease?
                .right
                  = tf.select :insurance_policy_id, options_for_select(policies.map { |p| [{ false => 'lease only', true => 'with residual' }[p.residual], p.id] }, insurance_term.insurance_policy_id), { label: false }, class: 'residual'
              - else
                = tf.hidden_field :insurance_policy_id

              .right
                = tf.text_field :premium, label: false, data: { autonumeric: autonumeric_options }, class: 'premium'
                = tf.hidden_field :overridden, class: 'overridden'
            = tf.hidden_field :category, value: category.name

      - if lender.right? && !i.zero?
        .row.rate
          .columns.clearfix
            .left Rate
            .right= category.interest_rate.percent_value
        .row.payment
          .columns.clearfix
            .left Payment
            .right= category.payment.format
